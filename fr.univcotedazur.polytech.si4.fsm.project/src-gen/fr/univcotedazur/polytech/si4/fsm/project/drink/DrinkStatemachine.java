/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drink;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkStatemachine implements IDrinkStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean chooseCoin;
		
		
		public void raiseChooseCoin() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseCoin = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean orderSuccess;
		
		
		public void raiseOrderSuccess() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							orderSuccess = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseNFC;
		
		
		public void raiseChooseNFC() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseNFC = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseSlide;
		
		
		public void raiseChooseSlide() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseSlide = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseDrink;
		
		
		public void raiseChooseDrink() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseDrink = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCup;
		
		
		public void raiseAddCup() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean isCoffee;
		
		
		public void raiseIsCoffee() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isCoffee = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean isEspresso;
		
		
		public void raiseIsEspresso() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isEspresso = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean isTea;
		
		
		public void raiseIsTea() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							isTea = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean takeDrink;
		
		
		public void raiseTakeDrink() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							takeDrink = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseMilk;
		
		
		public void raiseChooseMilk() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseMilk = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseSirup;
		
		
		public void raiseChooseSirup() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseSirup = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean chooseIce;
		
		
		public void raiseChooseIce() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chooseIce = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean changeText;
		
		
		public void raiseChangeText() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							changeText = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean heatWater;
		
		
		public void raiseHeatWater() {
			synchronized(DrinkStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							heatWater = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean waitCoin;
		
		
		public boolean isRaisedWaitCoin() {
			synchronized(DrinkStatemachine.this) {
				return waitCoin;
			}
		}
		
		protected void raiseWaitCoin() {
			synchronized(DrinkStatemachine.this) {
				waitCoin = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitCoinRaised();
				}
			}
		}
		
		private boolean initial;
		
		
		public boolean isRaisedInitial() {
			synchronized(DrinkStatemachine.this) {
				return initial;
			}
		}
		
		protected void raiseInitial() {
			synchronized(DrinkStatemachine.this) {
				initial = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onInitialRaised();
				}
			}
		}
		
		private boolean cancelOrder;
		
		
		public boolean isRaisedCancelOrder() {
			synchronized(DrinkStatemachine.this) {
				return cancelOrder;
			}
		}
		
		protected void raiseCancelOrder() {
			synchronized(DrinkStatemachine.this) {
				cancelOrder = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelOrderRaised();
				}
			}
		}
		
		private boolean isActive;
		
		
		public boolean isRaisedIsActive() {
			synchronized(DrinkStatemachine.this) {
				return isActive;
			}
		}
		
		protected void raiseIsActive() {
			synchronized(DrinkStatemachine.this) {
				isActive = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onIsActiveRaised();
				}
			}
		}
		
		private boolean confirmCoins;
		
		
		public boolean isRaisedConfirmCoins() {
			synchronized(DrinkStatemachine.this) {
				return confirmCoins;
			}
		}
		
		protected void raiseConfirmCoins() {
			synchronized(DrinkStatemachine.this) {
				confirmCoins = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onConfirmCoinsRaised();
				}
			}
		}
		
		private boolean cleanMachine;
		
		
		public boolean isRaisedCleanMachine() {
			synchronized(DrinkStatemachine.this) {
				return cleanMachine;
			}
		}
		
		protected void raiseCleanMachine() {
			synchronized(DrinkStatemachine.this) {
				cleanMachine = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCleanMachineRaised();
				}
			}
		}
		
		private boolean bar;
		
		
		public boolean isRaisedBar() {
			synchronized(DrinkStatemachine.this) {
				return bar;
			}
		}
		
		protected void raiseBar() {
			synchronized(DrinkStatemachine.this) {
				bar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onBarRaised();
				}
			}
		}
		
		private boolean waterReady;
		
		
		public boolean isRaisedWaterReady() {
			synchronized(DrinkStatemachine.this) {
				return waterReady;
			}
		}
		
		protected void raiseWaterReady() {
			synchronized(DrinkStatemachine.this) {
				waterReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaterReadyRaised();
				}
			}
		}
		
		private boolean cupReady;
		
		
		public boolean isRaisedCupReady() {
			synchronized(DrinkStatemachine.this) {
				return cupReady;
			}
		}
		
		protected void raiseCupReady() {
			synchronized(DrinkStatemachine.this) {
				cupReady = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCupReadyRaised();
				}
			}
		}
		
		private boolean prepStart;
		
		
		public boolean isRaisedPrepStart() {
			synchronized(DrinkStatemachine.this) {
				return prepStart;
			}
		}
		
		protected void raisePrepStart() {
			synchronized(DrinkStatemachine.this) {
				prepStart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPrepStartRaised();
				}
			}
		}
		
		private boolean prepFinish;
		
		
		public boolean isRaisedPrepFinish() {
			synchronized(DrinkStatemachine.this) {
				return prepFinish;
			}
		}
		
		protected void raisePrepFinish() {
			synchronized(DrinkStatemachine.this) {
				prepFinish = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPrepFinishRaised();
				}
			}
		}
		
		private boolean nFCSuccess;
		
		
		public boolean isRaisedNFCSuccess() {
			synchronized(DrinkStatemachine.this) {
				return nFCSuccess;
			}
		}
		
		protected void raiseNFCSuccess() {
			synchronized(DrinkStatemachine.this) {
				nFCSuccess = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onNFCSuccessRaised();
				}
			}
		}
		
		private boolean checkIngredients;
		
		
		public boolean isRaisedCheckIngredients() {
			synchronized(DrinkStatemachine.this) {
				return checkIngredients;
			}
		}
		
		protected void raiseCheckIngredients() {
			synchronized(DrinkStatemachine.this) {
				checkIngredients = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCheckIngredientsRaised();
				}
			}
		}
		
		private boolean myCup;
		
		public synchronized boolean getMyCup() {
			synchronized(DrinkStatemachine.this) {
				return myCup;
			}
		}
		
		public void setMyCup(boolean value) {
			synchronized(DrinkStatemachine.this) {
				this.myCup = value;
			}
		}
		
		private boolean tea;
		
		public synchronized boolean getTea() {
			synchronized(DrinkStatemachine.this) {
				return tea;
			}
		}
		
		public void setTea(boolean value) {
			synchronized(DrinkStatemachine.this) {
				this.tea = value;
			}
		}
		
		private boolean myMilk;
		
		public synchronized boolean getMyMilk() {
			synchronized(DrinkStatemachine.this) {
				return myMilk;
			}
		}
		
		public void setMyMilk(boolean value) {
			synchronized(DrinkStatemachine.this) {
				this.myMilk = value;
			}
		}
		
		private boolean mySirup;
		
		public synchronized boolean getMySirup() {
			synchronized(DrinkStatemachine.this) {
				return mySirup;
			}
		}
		
		public void setMySirup(boolean value) {
			synchronized(DrinkStatemachine.this) {
				this.mySirup = value;
			}
		}
		
		private boolean myIce;
		
		public synchronized boolean getMyIce() {
			synchronized(DrinkStatemachine.this) {
				return myIce;
			}
		}
		
		public void setMyIce(boolean value) {
			synchronized(DrinkStatemachine.this) {
				this.myIce = value;
			}
		}
		
		protected void clearEvents() {
			chooseCoin = false;
			orderSuccess = false;
			chooseNFC = false;
			chooseSlide = false;
			chooseDrink = false;
			cancel = false;
			addCup = false;
			isCoffee = false;
			isEspresso = false;
			isTea = false;
			takeDrink = false;
			chooseMilk = false;
			chooseSirup = false;
			chooseIce = false;
			changeText = false;
			heatWater = false;
		}
		protected void clearOutEvents() {
		
		waitCoin = false;
		initial = false;
		cancelOrder = false;
		isActive = false;
		confirmCoins = false;
		cleanMachine = false;
		bar = false;
		waterReady = false;
		cupReady = false;
		prepStart = false;
		prepFinish = false;
		nFCSuccess = false;
		checkIngredients = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Customer,
		main_region_Customer_r1_initial,
		main_region_Customer_r1_coinChosen,
		main_region_Customer_r1_coinChosen_r1_waitCoin,
		main_region_Customer_r1_coinChosen_r1_comfirmOrder,
		main_region_Customer_r1_waitPaymentChoice,
		main_region_Customer_r1_waitDrinkChoice,
		main_region_Customer_extraIce_waitIce,
		main_region_Customer_extraIce_choseIce,
		main_region_Customer_extraSirup_waitSirup,
		main_region_Customer_extraSirup_choseSirup,
		main_region_Customer_extraMilk_waitMilk,
		main_region_Customer_extraMilk_choseMilk,
		main_region_Customer_r2_chosenSlide,
		main_region_Customer_textActive_userText,
		main_region_Customer_active_initAll,
		main_region_Customer_active_active,
		main_region_Customer_myCup_detect,
		main_region_Customer_myCup_hasCup,
		main_region_preparation,
		main_region_preparation_r1_init,
		main_region_preparation_r1_coffee,
		main_region_preparation_r1_coffee_r1_putPod,
		main_region_preparation_r1_coffee_r1_putCup,
		main_region_preparation_r1_espresso,
		main_region_preparation_r1_espresso_r1_grainCrushing,
		main_region_preparation_r1_espresso_r1_step2,
		main_region_preparation_r1_espresso_r1_step2_r1_putCup,
		main_region_preparation_r1_espresso_r1_step2_r2_packBeans,
		main_region_preparation_r1_tea,
		main_region_preparation_r1_tea_r1_putTeaBag,
		main_region_preparation_r1_tea_r1_putCup,
		main_region_preparation_r1_prepareMachine,
		main_region_preparation_r1_waiteWater,
		main_region_preparation_r2_waterHeating,
		main_region_preparation_r2_waiteCup,
		main_region_infusion,
		main_region_removeTeaBag,
		main_region_Sugar_Water,
		main_region_Sugar_Water_r1_addSugar,
		main_region_Sugar_Water_r1_addSirup,
		main_region_Sugar_Water_r2_addWater,
		main_region_prepFinish,
		main_region_addMilk,
		main_region_addIce,
		$NullState$
	};
	
	private final State[] stateVector = new State[8];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[18];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DrinkStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 8; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setMyCup(false);
		
		sCInterface.setTea(false);
		
		sCInterface.setMyMilk(false);
		
		sCInterface.setMySirup(false);
		
		sCInterface.setMyIce(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Customer_r1_initial:
				main_region_Customer_r1_initial_react(true);
				break;
			case main_region_Customer_r1_coinChosen_r1_waitCoin:
				main_region_Customer_r1_coinChosen_r1_waitCoin_react(true);
				break;
			case main_region_Customer_r1_coinChosen_r1_comfirmOrder:
				main_region_Customer_r1_coinChosen_r1_comfirmOrder_react(true);
				break;
			case main_region_Customer_r1_waitPaymentChoice:
				main_region_Customer_r1_waitPaymentChoice_react(true);
				break;
			case main_region_Customer_r1_waitDrinkChoice:
				main_region_Customer_r1_waitDrinkChoice_react(true);
				break;
			case main_region_Customer_extraIce_waitIce:
				main_region_Customer_extraIce_waitIce_react(true);
				break;
			case main_region_Customer_extraIce_choseIce:
				main_region_Customer_extraIce_choseIce_react(true);
				break;
			case main_region_Customer_extraSirup_waitSirup:
				main_region_Customer_extraSirup_waitSirup_react(true);
				break;
			case main_region_Customer_extraSirup_choseSirup:
				main_region_Customer_extraSirup_choseSirup_react(true);
				break;
			case main_region_Customer_extraMilk_waitMilk:
				main_region_Customer_extraMilk_waitMilk_react(true);
				break;
			case main_region_Customer_extraMilk_choseMilk:
				main_region_Customer_extraMilk_choseMilk_react(true);
				break;
			case main_region_Customer_r2_chosenSlide:
				main_region_Customer_r2_chosenSlide_react(true);
				break;
			case main_region_Customer_textActive_userText:
				main_region_Customer_textActive_userText_react(true);
				break;
			case main_region_Customer_active_initAll:
				main_region_Customer_active_initAll_react(true);
				break;
			case main_region_Customer_active_active:
				main_region_Customer_active_active_react(true);
				break;
			case main_region_Customer_myCup_detect:
				main_region_Customer_myCup_detect_react(true);
				break;
			case main_region_Customer_myCup_hasCup:
				main_region_Customer_myCup_hasCup_react(true);
				break;
			case main_region_preparation_r1_init:
				main_region_preparation_r1_init_react(true);
				break;
			case main_region_preparation_r1_coffee_r1_putPod:
				main_region_preparation_r1_coffee_r1_putPod_react(true);
				break;
			case main_region_preparation_r1_coffee_r1_putCup:
				main_region_preparation_r1_coffee_r1_putCup_react(true);
				break;
			case main_region_preparation_r1_espresso_r1_grainCrushing:
				main_region_preparation_r1_espresso_r1_grainCrushing_react(true);
				break;
			case main_region_preparation_r1_espresso_r1_step2_r1_putCup:
				main_region_preparation_r1_espresso_r1_step2_r1_putCup_react(true);
				break;
			case main_region_preparation_r1_espresso_r1_step2_r2_packBeans:
				main_region_preparation_r1_espresso_r1_step2_r2_packBeans_react(true);
				break;
			case main_region_preparation_r1_tea_r1_putTeaBag:
				main_region_preparation_r1_tea_r1_putTeaBag_react(true);
				break;
			case main_region_preparation_r1_tea_r1_putCup:
				main_region_preparation_r1_tea_r1_putCup_react(true);
				break;
			case main_region_preparation_r1_prepareMachine:
				main_region_preparation_r1_prepareMachine_react(true);
				break;
			case main_region_preparation_r1_waiteWater:
				main_region_preparation_r1_waiteWater_react(true);
				break;
			case main_region_preparation_r2_waterHeating:
				main_region_preparation_r2_waterHeating_react(true);
				break;
			case main_region_preparation_r2_waiteCup:
				main_region_preparation_r2_waiteCup_react(true);
				break;
			case main_region_infusion:
				main_region_infusion_react(true);
				break;
			case main_region_removeTeaBag:
				main_region_removeTeaBag_react(true);
				break;
			case main_region_Sugar_Water_r1_addSugar:
				main_region_Sugar_Water_r1_addSugar_react(true);
				break;
			case main_region_Sugar_Water_r1_addSirup:
				main_region_Sugar_Water_r1_addSirup_react(true);
				break;
			case main_region_Sugar_Water_r2_addWater:
				main_region_Sugar_Water_r2_addWater_react(true);
				break;
			case main_region_prepFinish:
				main_region_prepFinish_react(true);
				break;
			case main_region_addMilk:
				main_region_addMilk_react(true);
				break;
			case main_region_addIce:
				main_region_addIce_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$||stateVector[4] != State.$NullState$||stateVector[5] != State.$NullState$||stateVector[6] != State.$NullState$||stateVector[7] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Customer:
			return stateVector[0].ordinal() >= State.
					main_region_Customer.ordinal()&& stateVector[0].ordinal() <= State.main_region_Customer_myCup_hasCup.ordinal();
		case main_region_Customer_r1_initial:
			return stateVector[0] == State.main_region_Customer_r1_initial;
		case main_region_Customer_r1_coinChosen:
			return stateVector[0].ordinal() >= State.
					main_region_Customer_r1_coinChosen.ordinal()&& stateVector[0].ordinal() <= State.main_region_Customer_r1_coinChosen_r1_comfirmOrder.ordinal();
		case main_region_Customer_r1_coinChosen_r1_waitCoin:
			return stateVector[0] == State.main_region_Customer_r1_coinChosen_r1_waitCoin;
		case main_region_Customer_r1_coinChosen_r1_comfirmOrder:
			return stateVector[0] == State.main_region_Customer_r1_coinChosen_r1_comfirmOrder;
		case main_region_Customer_r1_waitPaymentChoice:
			return stateVector[0] == State.main_region_Customer_r1_waitPaymentChoice;
		case main_region_Customer_r1_waitDrinkChoice:
			return stateVector[0] == State.main_region_Customer_r1_waitDrinkChoice;
		case main_region_Customer_extraIce_waitIce:
			return stateVector[1] == State.main_region_Customer_extraIce_waitIce;
		case main_region_Customer_extraIce_choseIce:
			return stateVector[1] == State.main_region_Customer_extraIce_choseIce;
		case main_region_Customer_extraSirup_waitSirup:
			return stateVector[2] == State.main_region_Customer_extraSirup_waitSirup;
		case main_region_Customer_extraSirup_choseSirup:
			return stateVector[2] == State.main_region_Customer_extraSirup_choseSirup;
		case main_region_Customer_extraMilk_waitMilk:
			return stateVector[3] == State.main_region_Customer_extraMilk_waitMilk;
		case main_region_Customer_extraMilk_choseMilk:
			return stateVector[3] == State.main_region_Customer_extraMilk_choseMilk;
		case main_region_Customer_r2_chosenSlide:
			return stateVector[4] == State.main_region_Customer_r2_chosenSlide;
		case main_region_Customer_textActive_userText:
			return stateVector[5] == State.main_region_Customer_textActive_userText;
		case main_region_Customer_active_initAll:
			return stateVector[6] == State.main_region_Customer_active_initAll;
		case main_region_Customer_active_active:
			return stateVector[6] == State.main_region_Customer_active_active;
		case main_region_Customer_myCup_detect:
			return stateVector[7] == State.main_region_Customer_myCup_detect;
		case main_region_Customer_myCup_hasCup:
			return stateVector[7] == State.main_region_Customer_myCup_hasCup;
		case main_region_preparation:
			return stateVector[0].ordinal() >= State.
					main_region_preparation.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r2_waiteCup.ordinal();
		case main_region_preparation_r1_init:
			return stateVector[0] == State.main_region_preparation_r1_init;
		case main_region_preparation_r1_coffee:
			return stateVector[0].ordinal() >= State.
					main_region_preparation_r1_coffee.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r1_coffee_r1_putCup.ordinal();
		case main_region_preparation_r1_coffee_r1_putPod:
			return stateVector[0] == State.main_region_preparation_r1_coffee_r1_putPod;
		case main_region_preparation_r1_coffee_r1_putCup:
			return stateVector[0] == State.main_region_preparation_r1_coffee_r1_putCup;
		case main_region_preparation_r1_espresso:
			return stateVector[0].ordinal() >= State.
					main_region_preparation_r1_espresso.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r1_espresso_r1_step2_r2_packBeans.ordinal();
		case main_region_preparation_r1_espresso_r1_grainCrushing:
			return stateVector[0] == State.main_region_preparation_r1_espresso_r1_grainCrushing;
		case main_region_preparation_r1_espresso_r1_step2:
			return stateVector[0].ordinal() >= State.
					main_region_preparation_r1_espresso_r1_step2.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r1_espresso_r1_step2_r2_packBeans.ordinal();
		case main_region_preparation_r1_espresso_r1_step2_r1_putCup:
			return stateVector[0] == State.main_region_preparation_r1_espresso_r1_step2_r1_putCup;
		case main_region_preparation_r1_espresso_r1_step2_r2_packBeans:
			return stateVector[1] == State.main_region_preparation_r1_espresso_r1_step2_r2_packBeans;
		case main_region_preparation_r1_tea:
			return stateVector[0].ordinal() >= State.
					main_region_preparation_r1_tea.ordinal()&& stateVector[0].ordinal() <= State.main_region_preparation_r1_tea_r1_putCup.ordinal();
		case main_region_preparation_r1_tea_r1_putTeaBag:
			return stateVector[0] == State.main_region_preparation_r1_tea_r1_putTeaBag;
		case main_region_preparation_r1_tea_r1_putCup:
			return stateVector[0] == State.main_region_preparation_r1_tea_r1_putCup;
		case main_region_preparation_r1_prepareMachine:
			return stateVector[0] == State.main_region_preparation_r1_prepareMachine;
		case main_region_preparation_r1_waiteWater:
			return stateVector[0] == State.main_region_preparation_r1_waiteWater;
		case main_region_preparation_r2_waterHeating:
			return stateVector[2] == State.main_region_preparation_r2_waterHeating;
		case main_region_preparation_r2_waiteCup:
			return stateVector[2] == State.main_region_preparation_r2_waiteCup;
		case main_region_infusion:
			return stateVector[0] == State.main_region_infusion;
		case main_region_removeTeaBag:
			return stateVector[0] == State.main_region_removeTeaBag;
		case main_region_Sugar_Water:
			return stateVector[0].ordinal() >= State.
					main_region_Sugar_Water.ordinal()&& stateVector[0].ordinal() <= State.main_region_Sugar_Water_r2_addWater.ordinal();
		case main_region_Sugar_Water_r1_addSugar:
			return stateVector[0] == State.main_region_Sugar_Water_r1_addSugar;
		case main_region_Sugar_Water_r1_addSirup:
			return stateVector[0] == State.main_region_Sugar_Water_r1_addSirup;
		case main_region_Sugar_Water_r2_addWater:
			return stateVector[1] == State.main_region_Sugar_Water_r2_addWater;
		case main_region_prepFinish:
			return stateVector[0] == State.main_region_prepFinish;
		case main_region_addMilk:
			return stateVector[0] == State.main_region_addMilk;
		case main_region_addIce:
			return stateVector[0] == State.main_region_addIce;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseChooseCoin() {
		sCInterface.raiseChooseCoin();
	}
	
	public synchronized void raiseOrderSuccess() {
		sCInterface.raiseOrderSuccess();
	}
	
	public synchronized void raiseChooseNFC() {
		sCInterface.raiseChooseNFC();
	}
	
	public synchronized void raiseChooseSlide() {
		sCInterface.raiseChooseSlide();
	}
	
	public synchronized void raiseChooseDrink() {
		sCInterface.raiseChooseDrink();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseAddCup() {
		sCInterface.raiseAddCup();
	}
	
	public synchronized void raiseIsCoffee() {
		sCInterface.raiseIsCoffee();
	}
	
	public synchronized void raiseIsEspresso() {
		sCInterface.raiseIsEspresso();
	}
	
	public synchronized void raiseIsTea() {
		sCInterface.raiseIsTea();
	}
	
	public synchronized void raiseTakeDrink() {
		sCInterface.raiseTakeDrink();
	}
	
	public synchronized void raiseChooseMilk() {
		sCInterface.raiseChooseMilk();
	}
	
	public synchronized void raiseChooseSirup() {
		sCInterface.raiseChooseSirup();
	}
	
	public synchronized void raiseChooseIce() {
		sCInterface.raiseChooseIce();
	}
	
	public synchronized void raiseChangeText() {
		sCInterface.raiseChangeText();
	}
	
	public synchronized void raiseHeatWater() {
		sCInterface.raiseHeatWater();
	}
	
	public synchronized boolean isRaisedWaitCoin() {
		return sCInterface.isRaisedWaitCoin();
	}
	
	public synchronized boolean isRaisedInitial() {
		return sCInterface.isRaisedInitial();
	}
	
	public synchronized boolean isRaisedCancelOrder() {
		return sCInterface.isRaisedCancelOrder();
	}
	
	public synchronized boolean isRaisedIsActive() {
		return sCInterface.isRaisedIsActive();
	}
	
	public synchronized boolean isRaisedConfirmCoins() {
		return sCInterface.isRaisedConfirmCoins();
	}
	
	public synchronized boolean isRaisedCleanMachine() {
		return sCInterface.isRaisedCleanMachine();
	}
	
	public synchronized boolean isRaisedBar() {
		return sCInterface.isRaisedBar();
	}
	
	public synchronized boolean isRaisedWaterReady() {
		return sCInterface.isRaisedWaterReady();
	}
	
	public synchronized boolean isRaisedCupReady() {
		return sCInterface.isRaisedCupReady();
	}
	
	public synchronized boolean isRaisedPrepStart() {
		return sCInterface.isRaisedPrepStart();
	}
	
	public synchronized boolean isRaisedPrepFinish() {
		return sCInterface.isRaisedPrepFinish();
	}
	
	public synchronized boolean isRaisedNFCSuccess() {
		return sCInterface.isRaisedNFCSuccess();
	}
	
	public synchronized boolean isRaisedCheckIngredients() {
		return sCInterface.isRaisedCheckIngredients();
	}
	
	public synchronized boolean getMyCup() {
		return sCInterface.getMyCup();
	}
	
	public synchronized void setMyCup(boolean value) {
		sCInterface.setMyCup(value);
	}
	
	public synchronized boolean getTea() {
		return sCInterface.getTea();
	}
	
	public synchronized void setTea(boolean value) {
		sCInterface.setTea(value);
	}
	
	public synchronized boolean getMyMilk() {
		return sCInterface.getMyMilk();
	}
	
	public synchronized void setMyMilk(boolean value) {
		sCInterface.setMyMilk(value);
	}
	
	public synchronized boolean getMySirup() {
		return sCInterface.getMySirup();
	}
	
	public synchronized void setMySirup(boolean value) {
		sCInterface.setMySirup(value);
	}
	
	public synchronized boolean getMyIce() {
		return sCInterface.getMyIce();
	}
	
	public synchronized void setMyIce(boolean value) {
		sCInterface.setMyIce(value);
	}
	
	private boolean check_main_region_Sugar_Water_r1__choice_0_tr0_tr0() {
		return sCInterface.getMySirup()==true;
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return sCInterface.getTea()==true;
	}
	
	private boolean check_main_region__choice_1_tr0_tr0() {
		return sCInterface.getMyIce()==true;
	}
	
	private boolean check_main_region__choice_2_tr1_tr1() {
		return sCInterface.getMyMilk()==true;
	}
	
	private void effect_main_region_preparation_r1_espresso_r1_step2_tr0() {
		exitSequence_main_region_preparation_r1_espresso();
		enterSequence_main_region_preparation_r1_waiteWater_default();
	}
	
	private void effect_main_region_Sugar_Water_tr0() {
		exitSequence_main_region_Sugar_Water();
		react_main_region__choice_0();
	}
	
	private void effect_main_region_Sugar_Water_r1__choice_0_tr0() {
		enterSequence_main_region_Sugar_Water_r1_addSirup_default();
	}
	
	private void effect_main_region_Sugar_Water_r1__choice_0_tr1() {
		enterSequence_main_region_Sugar_Water_r1_addSugar_default();
	}
	
	private void effect_main_region__choice_0_tr0() {
		enterSequence_main_region_infusion_default();
	}
	
	private void effect_main_region__choice_0_tr1() {
		react_main_region__choice_1();
	}
	
	private void effect_main_region__choice_1_tr0() {
		enterSequence_main_region_addIce_default();
	}
	
	private void effect_main_region__choice_1_tr1() {
		react_main_region__choice_2();
	}
	
	private void effect_main_region__choice_2_tr1() {
		enterSequence_main_region_addMilk_default();
	}
	
	private void effect_main_region__choice_2_tr0() {
		sCInterface.raisePrepFinish();
		
		enterSequence_main_region_prepFinish_default();
	}
	
	/* Entry action for state 'initial'. */
	private void entryAction_main_region_Customer_r1_initial() {
		sCInterface.setMyCup(false);
		
		sCInterface.setMyMilk(false);
		
		sCInterface.setMySirup(false);
		
		sCInterface.setMyIce(false);
	}
	
	/* Entry action for state 'active'. */
	private void entryAction_main_region_Customer_active_active() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'putPod'. */
	private void entryAction_main_region_preparation_r1_coffee_r1_putPod() {
		timer.setTimer(this, 1, (3 * 1000), false);
	}
	
	/* Entry action for state 'putCup'. */
	private void entryAction_main_region_preparation_r1_coffee_r1_putCup() {
		timer.setTimer(this, 2, (1 * 1000), false);
	}
	
	/* Entry action for state 'grainCrushing'. */
	private void entryAction_main_region_preparation_r1_espresso_r1_grainCrushing() {
		timer.setTimer(this, 3, (5 * 1000), false);
	}
	
	/* Entry action for state 'putCup'. */
	private void entryAction_main_region_preparation_r1_espresso_r1_step2_r1_putCup() {
		timer.setTimer(this, 4, (2 * 1000), false);
	}
	
	/* Entry action for state 'packBeans'. */
	private void entryAction_main_region_preparation_r1_espresso_r1_step2_r2_packBeans() {
		timer.setTimer(this, 5, (4 * 1000), false);
	}
	
	/* Entry action for state 'putTeaBag'. */
	private void entryAction_main_region_preparation_r1_tea_r1_putTeaBag() {
		timer.setTimer(this, 6, (2 * 1000), false);
	}
	
	/* Entry action for state 'putCup'. */
	private void entryAction_main_region_preparation_r1_tea_r1_putCup() {
		timer.setTimer(this, 7, (1 * 1000), false);
	}
	
	/* Entry action for state 'prepareMachine'. */
	private void entryAction_main_region_preparation_r1_prepareMachine() {
		timer.setTimer(this, 8, 10, false);
		
		sCInterface.setTea(false);
	}
	
	/* Entry action for state 'waiteWater'. */
	private void entryAction_main_region_preparation_r1_waiteWater() {
		timer.setTimer(this, 9, (1 * 1000), false);
	}
	
	/* Entry action for state 'waiteCup'. */
	private void entryAction_main_region_preparation_r2_waiteCup() {
		timer.setTimer(this, 10, (1 * 1000), false);
	}
	
	/* Entry action for state 'infusion'. */
	private void entryAction_main_region_infusion() {
		timer.setTimer(this, 11, (6 * 1000), false);
	}
	
	/* Entry action for state 'removeTeaBag'. */
	private void entryAction_main_region_removeTeaBag() {
		timer.setTimer(this, 12, (3 * 1000), false);
	}
	
	/* Entry action for state 'addSugar'. */
	private void entryAction_main_region_Sugar_Water_r1_addSugar() {
		timer.setTimer(this, 13, (1 * 1000), false);
	}
	
	/* Entry action for state 'addSirup'. */
	private void entryAction_main_region_Sugar_Water_r1_addSirup() {
		timer.setTimer(this, 14, (1 * 1000), false);
	}
	
	/* Entry action for state 'addWater'. */
	private void entryAction_main_region_Sugar_Water_r2_addWater() {
		timer.setTimer(this, 15, (2 * 1000), false);
	}
	
	/* Entry action for state 'addMilk'. */
	private void entryAction_main_region_addMilk() {
		timer.setTimer(this, 16, (1 * 1000), false);
	}
	
	/* Entry action for state 'addIce'. */
	private void entryAction_main_region_addIce() {
		timer.setTimer(this, 17, (1 * 1000), false);
	}
	
	/* Exit action for state 'active'. */
	private void exitAction_main_region_Customer_active_active() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'putPod'. */
	private void exitAction_main_region_preparation_r1_coffee_r1_putPod() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'putCup'. */
	private void exitAction_main_region_preparation_r1_coffee_r1_putCup() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'grainCrushing'. */
	private void exitAction_main_region_preparation_r1_espresso_r1_grainCrushing() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'putCup'. */
	private void exitAction_main_region_preparation_r1_espresso_r1_step2_r1_putCup() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'packBeans'. */
	private void exitAction_main_region_preparation_r1_espresso_r1_step2_r2_packBeans() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'putTeaBag'. */
	private void exitAction_main_region_preparation_r1_tea_r1_putTeaBag() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'putCup'. */
	private void exitAction_main_region_preparation_r1_tea_r1_putCup() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'prepareMachine'. */
	private void exitAction_main_region_preparation_r1_prepareMachine() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'waiteWater'. */
	private void exitAction_main_region_preparation_r1_waiteWater() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'waiteCup'. */
	private void exitAction_main_region_preparation_r2_waiteCup() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'infusion'. */
	private void exitAction_main_region_infusion() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'removeTeaBag'. */
	private void exitAction_main_region_removeTeaBag() {
		timer.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'addSugar'. */
	private void exitAction_main_region_Sugar_Water_r1_addSugar() {
		timer.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'addSirup'. */
	private void exitAction_main_region_Sugar_Water_r1_addSirup() {
		timer.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'addWater'. */
	private void exitAction_main_region_Sugar_Water_r2_addWater() {
		timer.unsetTimer(this, 15);
	}
	
	/* Exit action for state 'addMilk'. */
	private void exitAction_main_region_addMilk() {
		timer.unsetTimer(this, 16);
	}
	
	/* Exit action for state 'addIce'. */
	private void exitAction_main_region_addIce() {
		timer.unsetTimer(this, 17);
	}
	
	/* 'default' enter sequence for state Customer */
	private void enterSequence_main_region_Customer_default() {
		enterSequence_main_region_Customer_r1_default();
		enterSequence_main_region_Customer_extraIce_default();
		enterSequence_main_region_Customer_extraSirup_default();
		enterSequence_main_region_Customer_extraMilk_default();
		enterSequence_main_region_Customer_r2_default();
		enterSequence_main_region_Customer_textActive_default();
		enterSequence_main_region_Customer_active_default();
		enterSequence_main_region_Customer_myCup_default();
	}
	
	/* 'default' enter sequence for state initial */
	private void enterSequence_main_region_Customer_r1_initial_default() {
		entryAction_main_region_Customer_r1_initial();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Customer_r1_initial;
	}
	
	/* 'default' enter sequence for state coinChosen */
	private void enterSequence_main_region_Customer_r1_coinChosen_default() {
		enterSequence_main_region_Customer_r1_coinChosen_r1_default();
	}
	
	/* 'default' enter sequence for state waitCoin */
	private void enterSequence_main_region_Customer_r1_coinChosen_r1_waitCoin_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Customer_r1_coinChosen_r1_waitCoin;
	}
	
	/* 'default' enter sequence for state comfirmOrder */
	private void enterSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Customer_r1_coinChosen_r1_comfirmOrder;
	}
	
	/* 'default' enter sequence for state waitPaymentChoice */
	private void enterSequence_main_region_Customer_r1_waitPaymentChoice_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Customer_r1_waitPaymentChoice;
	}
	
	/* 'default' enter sequence for state waitDrinkChoice */
	private void enterSequence_main_region_Customer_r1_waitDrinkChoice_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Customer_r1_waitDrinkChoice;
	}
	
	/* 'default' enter sequence for state waitIce */
	private void enterSequence_main_region_Customer_extraIce_waitIce_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Customer_extraIce_waitIce;
	}
	
	/* 'default' enter sequence for state choseIce */
	private void enterSequence_main_region_Customer_extraIce_choseIce_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Customer_extraIce_choseIce;
	}
	
	/* 'default' enter sequence for state waitSirup */
	private void enterSequence_main_region_Customer_extraSirup_waitSirup_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Customer_extraSirup_waitSirup;
	}
	
	/* 'default' enter sequence for state choseSirup */
	private void enterSequence_main_region_Customer_extraSirup_choseSirup_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Customer_extraSirup_choseSirup;
	}
	
	/* 'default' enter sequence for state waitMilk */
	private void enterSequence_main_region_Customer_extraMilk_waitMilk_default() {
		nextStateIndex = 3;
		stateVector[3] = State.main_region_Customer_extraMilk_waitMilk;
	}
	
	/* 'default' enter sequence for state choseMilk */
	private void enterSequence_main_region_Customer_extraMilk_choseMilk_default() {
		nextStateIndex = 3;
		stateVector[3] = State.main_region_Customer_extraMilk_choseMilk;
	}
	
	/* 'default' enter sequence for state chosenSlide */
	private void enterSequence_main_region_Customer_r2_chosenSlide_default() {
		nextStateIndex = 4;
		stateVector[4] = State.main_region_Customer_r2_chosenSlide;
	}
	
	/* 'default' enter sequence for state userText */
	private void enterSequence_main_region_Customer_textActive_userText_default() {
		nextStateIndex = 5;
		stateVector[5] = State.main_region_Customer_textActive_userText;
	}
	
	/* 'default' enter sequence for state initAll */
	private void enterSequence_main_region_Customer_active_initAll_default() {
		nextStateIndex = 6;
		stateVector[6] = State.main_region_Customer_active_initAll;
	}
	
	/* 'default' enter sequence for state active */
	private void enterSequence_main_region_Customer_active_active_default() {
		entryAction_main_region_Customer_active_active();
		nextStateIndex = 6;
		stateVector[6] = State.main_region_Customer_active_active;
	}
	
	/* 'default' enter sequence for state detect */
	private void enterSequence_main_region_Customer_myCup_detect_default() {
		nextStateIndex = 7;
		stateVector[7] = State.main_region_Customer_myCup_detect;
	}
	
	/* 'default' enter sequence for state hasCup */
	private void enterSequence_main_region_Customer_myCup_hasCup_default() {
		nextStateIndex = 7;
		stateVector[7] = State.main_region_Customer_myCup_hasCup;
	}
	
	/* 'default' enter sequence for state preparation */
	private void enterSequence_main_region_preparation_default() {
		enterSequence_main_region_preparation_r1_default();
		enterSequence_main_region_preparation_r2_default();
	}
	
	/* 'default' enter sequence for state init */
	private void enterSequence_main_region_preparation_r1_init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_init;
	}
	
	/* 'default' enter sequence for state coffee */
	private void enterSequence_main_region_preparation_r1_coffee_default() {
		enterSequence_main_region_preparation_r1_coffee_r1_default();
	}
	
	/* 'default' enter sequence for state putPod */
	private void enterSequence_main_region_preparation_r1_coffee_r1_putPod_default() {
		entryAction_main_region_preparation_r1_coffee_r1_putPod();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_coffee_r1_putPod;
	}
	
	/* 'default' enter sequence for state putCup */
	private void enterSequence_main_region_preparation_r1_coffee_r1_putCup_default() {
		entryAction_main_region_preparation_r1_coffee_r1_putCup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_coffee_r1_putCup;
	}
	
	/* 'default' enter sequence for state espresso */
	private void enterSequence_main_region_preparation_r1_espresso_default() {
		enterSequence_main_region_preparation_r1_espresso_r1_default();
	}
	
	/* 'default' enter sequence for state grainCrushing */
	private void enterSequence_main_region_preparation_r1_espresso_r1_grainCrushing_default() {
		entryAction_main_region_preparation_r1_espresso_r1_grainCrushing();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_espresso_r1_grainCrushing;
	}
	
	/* 'default' enter sequence for state step2 */
	private void enterSequence_main_region_preparation_r1_espresso_r1_step2_default() {
		enterSequence_main_region_preparation_r1_espresso_r1_step2_r1_default();
		enterSequence_main_region_preparation_r1_espresso_r1_step2_r2_default();
	}
	
	/* 'default' enter sequence for state putCup */
	private void enterSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup_default() {
		entryAction_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_espresso_r1_step2_r1_putCup;
	}
	
	/* 'default' enter sequence for state packBeans */
	private void enterSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans_default() {
		entryAction_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_preparation_r1_espresso_r1_step2_r2_packBeans;
	}
	
	/* 'default' enter sequence for state tea */
	private void enterSequence_main_region_preparation_r1_tea_default() {
		enterSequence_main_region_preparation_r1_tea_r1_default();
	}
	
	/* 'default' enter sequence for state putTeaBag */
	private void enterSequence_main_region_preparation_r1_tea_r1_putTeaBag_default() {
		entryAction_main_region_preparation_r1_tea_r1_putTeaBag();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_tea_r1_putTeaBag;
	}
	
	/* 'default' enter sequence for state putCup */
	private void enterSequence_main_region_preparation_r1_tea_r1_putCup_default() {
		entryAction_main_region_preparation_r1_tea_r1_putCup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_tea_r1_putCup;
	}
	
	/* 'default' enter sequence for state prepareMachine */
	private void enterSequence_main_region_preparation_r1_prepareMachine_default() {
		entryAction_main_region_preparation_r1_prepareMachine();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_prepareMachine;
	}
	
	/* 'default' enter sequence for state waiteWater */
	private void enterSequence_main_region_preparation_r1_waiteWater_default() {
		entryAction_main_region_preparation_r1_waiteWater();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_preparation_r1_waiteWater;
	}
	
	/* 'default' enter sequence for state waterHeating */
	private void enterSequence_main_region_preparation_r2_waterHeating_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_preparation_r2_waterHeating;
	}
	
	/* 'default' enter sequence for state waiteCup */
	private void enterSequence_main_region_preparation_r2_waiteCup_default() {
		entryAction_main_region_preparation_r2_waiteCup();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_preparation_r2_waiteCup;
	}
	
	/* 'default' enter sequence for state infusion */
	private void enterSequence_main_region_infusion_default() {
		entryAction_main_region_infusion();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_infusion;
	}
	
	/* 'default' enter sequence for state removeTeaBag */
	private void enterSequence_main_region_removeTeaBag_default() {
		entryAction_main_region_removeTeaBag();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_removeTeaBag;
	}
	
	/* 'default' enter sequence for state Sugar&Water */
	private void enterSequence_main_region_Sugar_Water_default() {
		enterSequence_main_region_Sugar_Water_r1_default();
		enterSequence_main_region_Sugar_Water_r2_default();
	}
	
	/* 'default' enter sequence for state addSugar */
	private void enterSequence_main_region_Sugar_Water_r1_addSugar_default() {
		entryAction_main_region_Sugar_Water_r1_addSugar();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Sugar_Water_r1_addSugar;
	}
	
	/* 'default' enter sequence for state addSirup */
	private void enterSequence_main_region_Sugar_Water_r1_addSirup_default() {
		entryAction_main_region_Sugar_Water_r1_addSirup();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Sugar_Water_r1_addSirup;
	}
	
	/* 'default' enter sequence for state addWater */
	private void enterSequence_main_region_Sugar_Water_r2_addWater_default() {
		entryAction_main_region_Sugar_Water_r2_addWater();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Sugar_Water_r2_addWater;
	}
	
	/* 'default' enter sequence for state prepFinish */
	private void enterSequence_main_region_prepFinish_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_prepFinish;
	}
	
	/* 'default' enter sequence for state addMilk */
	private void enterSequence_main_region_addMilk_default() {
		entryAction_main_region_addMilk();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_addMilk;
	}
	
	/* 'default' enter sequence for state addIce */
	private void enterSequence_main_region_addIce_default() {
		entryAction_main_region_addIce();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_addIce;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Customer_r1_default() {
		react_main_region_Customer_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Customer_r1_coinChosen_r1_default() {
		react_main_region_Customer_r1_coinChosen_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region extraIce */
	private void enterSequence_main_region_Customer_extraIce_default() {
		react_main_region_Customer_extraIce__entry_Default();
	}
	
	/* 'default' enter sequence for region extraSirup */
	private void enterSequence_main_region_Customer_extraSirup_default() {
		react_main_region_Customer_extraSirup__entry_Default();
	}
	
	/* 'default' enter sequence for region extraMilk */
	private void enterSequence_main_region_Customer_extraMilk_default() {
		react_main_region_Customer_extraMilk__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Customer_r2_default() {
		react_main_region_Customer_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region textActive */
	private void enterSequence_main_region_Customer_textActive_default() {
		react_main_region_Customer_textActive__entry_Default();
	}
	
	/* 'default' enter sequence for region active */
	private void enterSequence_main_region_Customer_active_default() {
		react_main_region_Customer_active__entry_Default();
	}
	
	/* 'default' enter sequence for region myCup */
	private void enterSequence_main_region_Customer_myCup_default() {
		react_main_region_Customer_myCup__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_default() {
		react_main_region_preparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_coffee_r1_default() {
		react_main_region_preparation_r1_coffee_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_espresso_r1_default() {
		react_main_region_preparation_r1_espresso_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_espresso_r1_step2_r1_default() {
		react_main_region_preparation_r1_espresso_r1_step2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_preparation_r1_espresso_r1_step2_r2_default() {
		react_main_region_preparation_r1_espresso_r1_step2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_preparation_r1_tea_r1_default() {
		react_main_region_preparation_r1_tea_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_preparation_r2_default() {
		react_main_region_preparation_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Sugar_Water_r1_default() {
		react_main_region_Sugar_Water_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Sugar_Water_r2_default() {
		react_main_region_Sugar_Water_r2__entry_Default();
	}
	
	/* Default exit sequence for state Customer */
	private void exitSequence_main_region_Customer() {
		exitSequence_main_region_Customer_r1();
		exitSequence_main_region_Customer_extraIce();
		exitSequence_main_region_Customer_extraSirup();
		exitSequence_main_region_Customer_extraMilk();
		exitSequence_main_region_Customer_r2();
		exitSequence_main_region_Customer_textActive();
		exitSequence_main_region_Customer_active();
		exitSequence_main_region_Customer_myCup();
	}
	
	/* Default exit sequence for state initial */
	private void exitSequence_main_region_Customer_r1_initial() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state coinChosen */
	private void exitSequence_main_region_Customer_r1_coinChosen() {
		exitSequence_main_region_Customer_r1_coinChosen_r1();
	}
	
	/* Default exit sequence for state waitCoin */
	private void exitSequence_main_region_Customer_r1_coinChosen_r1_waitCoin() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state comfirmOrder */
	private void exitSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitPaymentChoice */
	private void exitSequence_main_region_Customer_r1_waitPaymentChoice() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitDrinkChoice */
	private void exitSequence_main_region_Customer_r1_waitDrinkChoice() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitIce */
	private void exitSequence_main_region_Customer_extraIce_waitIce() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state choseIce */
	private void exitSequence_main_region_Customer_extraIce_choseIce() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitSirup */
	private void exitSequence_main_region_Customer_extraSirup_waitSirup() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state choseSirup */
	private void exitSequence_main_region_Customer_extraSirup_choseSirup() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state waitMilk */
	private void exitSequence_main_region_Customer_extraMilk_waitMilk() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state choseMilk */
	private void exitSequence_main_region_Customer_extraMilk_choseMilk() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state chosenSlide */
	private void exitSequence_main_region_Customer_r2_chosenSlide() {
		nextStateIndex = 4;
		stateVector[4] = State.$NullState$;
	}
	
	/* Default exit sequence for state userText */
	private void exitSequence_main_region_Customer_textActive_userText() {
		nextStateIndex = 5;
		stateVector[5] = State.$NullState$;
	}
	
	/* Default exit sequence for state initAll */
	private void exitSequence_main_region_Customer_active_initAll() {
		nextStateIndex = 6;
		stateVector[6] = State.$NullState$;
	}
	
	/* Default exit sequence for state active */
	private void exitSequence_main_region_Customer_active_active() {
		nextStateIndex = 6;
		stateVector[6] = State.$NullState$;
		
		exitAction_main_region_Customer_active_active();
	}
	
	/* Default exit sequence for state detect */
	private void exitSequence_main_region_Customer_myCup_detect() {
		nextStateIndex = 7;
		stateVector[7] = State.$NullState$;
	}
	
	/* Default exit sequence for state hasCup */
	private void exitSequence_main_region_Customer_myCup_hasCup() {
		nextStateIndex = 7;
		stateVector[7] = State.$NullState$;
	}
	
	/* Default exit sequence for state preparation */
	private void exitSequence_main_region_preparation() {
		exitSequence_main_region_preparation_r1();
		exitSequence_main_region_preparation_r2();
	}
	
	/* Default exit sequence for state init */
	private void exitSequence_main_region_preparation_r1_init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state coffee */
	private void exitSequence_main_region_preparation_r1_coffee() {
		exitSequence_main_region_preparation_r1_coffee_r1();
	}
	
	/* Default exit sequence for state putPod */
	private void exitSequence_main_region_preparation_r1_coffee_r1_putPod() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_coffee_r1_putPod();
	}
	
	/* Default exit sequence for state putCup */
	private void exitSequence_main_region_preparation_r1_coffee_r1_putCup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_coffee_r1_putCup();
	}
	
	/* Default exit sequence for state espresso */
	private void exitSequence_main_region_preparation_r1_espresso() {
		exitSequence_main_region_preparation_r1_espresso_r1();
	}
	
	/* Default exit sequence for state grainCrushing */
	private void exitSequence_main_region_preparation_r1_espresso_r1_grainCrushing() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_espresso_r1_grainCrushing();
	}
	
	/* Default exit sequence for state putCup */
	private void exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
	}
	
	/* Default exit sequence for state packBeans */
	private void exitSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
	}
	
	/* Default exit sequence for state tea */
	private void exitSequence_main_region_preparation_r1_tea() {
		exitSequence_main_region_preparation_r1_tea_r1();
	}
	
	/* Default exit sequence for state putTeaBag */
	private void exitSequence_main_region_preparation_r1_tea_r1_putTeaBag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_tea_r1_putTeaBag();
	}
	
	/* Default exit sequence for state putCup */
	private void exitSequence_main_region_preparation_r1_tea_r1_putCup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_tea_r1_putCup();
	}
	
	/* Default exit sequence for state prepareMachine */
	private void exitSequence_main_region_preparation_r1_prepareMachine() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_prepareMachine();
	}
	
	/* Default exit sequence for state waiteWater */
	private void exitSequence_main_region_preparation_r1_waiteWater() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_preparation_r1_waiteWater();
	}
	
	/* Default exit sequence for state waterHeating */
	private void exitSequence_main_region_preparation_r2_waterHeating() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state waiteCup */
	private void exitSequence_main_region_preparation_r2_waiteCup() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_preparation_r2_waiteCup();
	}
	
	/* Default exit sequence for state infusion */
	private void exitSequence_main_region_infusion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_infusion();
	}
	
	/* Default exit sequence for state removeTeaBag */
	private void exitSequence_main_region_removeTeaBag() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_removeTeaBag();
	}
	
	/* Default exit sequence for state Sugar&Water */
	private void exitSequence_main_region_Sugar_Water() {
		exitSequence_main_region_Sugar_Water_r1();
		exitSequence_main_region_Sugar_Water_r2();
	}
	
	/* Default exit sequence for state addSugar */
	private void exitSequence_main_region_Sugar_Water_r1_addSugar() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Sugar_Water_r1_addSugar();
	}
	
	/* Default exit sequence for state addSirup */
	private void exitSequence_main_region_Sugar_Water_r1_addSirup() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Sugar_Water_r1_addSirup();
	}
	
	/* Default exit sequence for state addWater */
	private void exitSequence_main_region_Sugar_Water_r2_addWater() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Sugar_Water_r2_addWater();
	}
	
	/* Default exit sequence for state prepFinish */
	private void exitSequence_main_region_prepFinish() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state addMilk */
	private void exitSequence_main_region_addMilk() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_addMilk();
	}
	
	/* Default exit sequence for state addIce */
	private void exitSequence_main_region_addIce() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_addIce();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Customer_r1_initial:
			exitSequence_main_region_Customer_r1_initial();
			break;
		case main_region_Customer_r1_coinChosen_r1_waitCoin:
			exitSequence_main_region_Customer_r1_coinChosen_r1_waitCoin();
			break;
		case main_region_Customer_r1_coinChosen_r1_comfirmOrder:
			exitSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder();
			break;
		case main_region_Customer_r1_waitPaymentChoice:
			exitSequence_main_region_Customer_r1_waitPaymentChoice();
			break;
		case main_region_Customer_r1_waitDrinkChoice:
			exitSequence_main_region_Customer_r1_waitDrinkChoice();
			break;
		case main_region_preparation_r1_init:
			exitSequence_main_region_preparation_r1_init();
			break;
		case main_region_preparation_r1_coffee_r1_putPod:
			exitSequence_main_region_preparation_r1_coffee_r1_putPod();
			break;
		case main_region_preparation_r1_coffee_r1_putCup:
			exitSequence_main_region_preparation_r1_coffee_r1_putCup();
			break;
		case main_region_preparation_r1_espresso_r1_grainCrushing:
			exitSequence_main_region_preparation_r1_espresso_r1_grainCrushing();
			break;
		case main_region_preparation_r1_espresso_r1_step2_r1_putCup:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
			break;
		case main_region_preparation_r1_tea_r1_putTeaBag:
			exitSequence_main_region_preparation_r1_tea_r1_putTeaBag();
			break;
		case main_region_preparation_r1_tea_r1_putCup:
			exitSequence_main_region_preparation_r1_tea_r1_putCup();
			break;
		case main_region_preparation_r1_prepareMachine:
			exitSequence_main_region_preparation_r1_prepareMachine();
			break;
		case main_region_preparation_r1_waiteWater:
			exitSequence_main_region_preparation_r1_waiteWater();
			break;
		case main_region_infusion:
			exitSequence_main_region_infusion();
			break;
		case main_region_removeTeaBag:
			exitSequence_main_region_removeTeaBag();
			break;
		case main_region_Sugar_Water_r1_addSugar:
			exitSequence_main_region_Sugar_Water_r1_addSugar();
			break;
		case main_region_Sugar_Water_r1_addSirup:
			exitSequence_main_region_Sugar_Water_r1_addSirup();
			break;
		case main_region_prepFinish:
			exitSequence_main_region_prepFinish();
			break;
		case main_region_addMilk:
			exitSequence_main_region_addMilk();
			break;
		case main_region_addIce:
			exitSequence_main_region_addIce();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Customer_extraIce_waitIce:
			exitSequence_main_region_Customer_extraIce_waitIce();
			break;
		case main_region_Customer_extraIce_choseIce:
			exitSequence_main_region_Customer_extraIce_choseIce();
			break;
		case main_region_preparation_r1_espresso_r1_step2_r2_packBeans:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
			break;
		case main_region_Sugar_Water_r2_addWater:
			exitSequence_main_region_Sugar_Water_r2_addWater();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Customer_extraSirup_waitSirup:
			exitSequence_main_region_Customer_extraSirup_waitSirup();
			break;
		case main_region_Customer_extraSirup_choseSirup:
			exitSequence_main_region_Customer_extraSirup_choseSirup();
			break;
		case main_region_preparation_r2_waterHeating:
			exitSequence_main_region_preparation_r2_waterHeating();
			break;
		case main_region_preparation_r2_waiteCup:
			exitSequence_main_region_preparation_r2_waiteCup();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case main_region_Customer_extraMilk_waitMilk:
			exitSequence_main_region_Customer_extraMilk_waitMilk();
			break;
		case main_region_Customer_extraMilk_choseMilk:
			exitSequence_main_region_Customer_extraMilk_choseMilk();
			break;
		default:
			break;
		}
		
		switch (stateVector[4]) {
		case main_region_Customer_r2_chosenSlide:
			exitSequence_main_region_Customer_r2_chosenSlide();
			break;
		default:
			break;
		}
		
		switch (stateVector[5]) {
		case main_region_Customer_textActive_userText:
			exitSequence_main_region_Customer_textActive_userText();
			break;
		default:
			break;
		}
		
		switch (stateVector[6]) {
		case main_region_Customer_active_initAll:
			exitSequence_main_region_Customer_active_initAll();
			break;
		case main_region_Customer_active_active:
			exitSequence_main_region_Customer_active_active();
			break;
		default:
			break;
		}
		
		switch (stateVector[7]) {
		case main_region_Customer_myCup_detect:
			exitSequence_main_region_Customer_myCup_detect();
			break;
		case main_region_Customer_myCup_hasCup:
			exitSequence_main_region_Customer_myCup_hasCup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Customer_r1() {
		switch (stateVector[0]) {
		case main_region_Customer_r1_initial:
			exitSequence_main_region_Customer_r1_initial();
			break;
		case main_region_Customer_r1_coinChosen_r1_waitCoin:
			exitSequence_main_region_Customer_r1_coinChosen_r1_waitCoin();
			break;
		case main_region_Customer_r1_coinChosen_r1_comfirmOrder:
			exitSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder();
			break;
		case main_region_Customer_r1_waitPaymentChoice:
			exitSequence_main_region_Customer_r1_waitPaymentChoice();
			break;
		case main_region_Customer_r1_waitDrinkChoice:
			exitSequence_main_region_Customer_r1_waitDrinkChoice();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Customer_r1_coinChosen_r1() {
		switch (stateVector[0]) {
		case main_region_Customer_r1_coinChosen_r1_waitCoin:
			exitSequence_main_region_Customer_r1_coinChosen_r1_waitCoin();
			break;
		case main_region_Customer_r1_coinChosen_r1_comfirmOrder:
			exitSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region extraIce */
	private void exitSequence_main_region_Customer_extraIce() {
		switch (stateVector[1]) {
		case main_region_Customer_extraIce_waitIce:
			exitSequence_main_region_Customer_extraIce_waitIce();
			break;
		case main_region_Customer_extraIce_choseIce:
			exitSequence_main_region_Customer_extraIce_choseIce();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region extraSirup */
	private void exitSequence_main_region_Customer_extraSirup() {
		switch (stateVector[2]) {
		case main_region_Customer_extraSirup_waitSirup:
			exitSequence_main_region_Customer_extraSirup_waitSirup();
			break;
		case main_region_Customer_extraSirup_choseSirup:
			exitSequence_main_region_Customer_extraSirup_choseSirup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region extraMilk */
	private void exitSequence_main_region_Customer_extraMilk() {
		switch (stateVector[3]) {
		case main_region_Customer_extraMilk_waitMilk:
			exitSequence_main_region_Customer_extraMilk_waitMilk();
			break;
		case main_region_Customer_extraMilk_choseMilk:
			exitSequence_main_region_Customer_extraMilk_choseMilk();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Customer_r2() {
		switch (stateVector[4]) {
		case main_region_Customer_r2_chosenSlide:
			exitSequence_main_region_Customer_r2_chosenSlide();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region textActive */
	private void exitSequence_main_region_Customer_textActive() {
		switch (stateVector[5]) {
		case main_region_Customer_textActive_userText:
			exitSequence_main_region_Customer_textActive_userText();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region active */
	private void exitSequence_main_region_Customer_active() {
		switch (stateVector[6]) {
		case main_region_Customer_active_initAll:
			exitSequence_main_region_Customer_active_initAll();
			break;
		case main_region_Customer_active_active:
			exitSequence_main_region_Customer_active_active();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region myCup */
	private void exitSequence_main_region_Customer_myCup() {
		switch (stateVector[7]) {
		case main_region_Customer_myCup_detect:
			exitSequence_main_region_Customer_myCup_detect();
			break;
		case main_region_Customer_myCup_hasCup:
			exitSequence_main_region_Customer_myCup_hasCup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_preparation_r1() {
		switch (stateVector[0]) {
		case main_region_preparation_r1_init:
			exitSequence_main_region_preparation_r1_init();
			break;
		case main_region_preparation_r1_coffee_r1_putPod:
			exitSequence_main_region_preparation_r1_coffee_r1_putPod();
			break;
		case main_region_preparation_r1_coffee_r1_putCup:
			exitSequence_main_region_preparation_r1_coffee_r1_putCup();
			break;
		case main_region_preparation_r1_espresso_r1_grainCrushing:
			exitSequence_main_region_preparation_r1_espresso_r1_grainCrushing();
			break;
		case main_region_preparation_r1_espresso_r1_step2_r1_putCup:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
			break;
		case main_region_preparation_r1_tea_r1_putTeaBag:
			exitSequence_main_region_preparation_r1_tea_r1_putTeaBag();
			break;
		case main_region_preparation_r1_tea_r1_putCup:
			exitSequence_main_region_preparation_r1_tea_r1_putCup();
			break;
		case main_region_preparation_r1_prepareMachine:
			exitSequence_main_region_preparation_r1_prepareMachine();
			break;
		case main_region_preparation_r1_waiteWater:
			exitSequence_main_region_preparation_r1_waiteWater();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_preparation_r1_espresso_r1_step2_r2_packBeans:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_preparation_r1_coffee_r1() {
		switch (stateVector[0]) {
		case main_region_preparation_r1_coffee_r1_putPod:
			exitSequence_main_region_preparation_r1_coffee_r1_putPod();
			break;
		case main_region_preparation_r1_coffee_r1_putCup:
			exitSequence_main_region_preparation_r1_coffee_r1_putCup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_preparation_r1_espresso_r1() {
		switch (stateVector[0]) {
		case main_region_preparation_r1_espresso_r1_grainCrushing:
			exitSequence_main_region_preparation_r1_espresso_r1_grainCrushing();
			break;
		case main_region_preparation_r1_espresso_r1_step2_r1_putCup:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_preparation_r1_espresso_r1_step2_r2_packBeans:
			exitSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_preparation_r1_tea_r1() {
		switch (stateVector[0]) {
		case main_region_preparation_r1_tea_r1_putTeaBag:
			exitSequence_main_region_preparation_r1_tea_r1_putTeaBag();
			break;
		case main_region_preparation_r1_tea_r1_putCup:
			exitSequence_main_region_preparation_r1_tea_r1_putCup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_preparation_r2() {
		switch (stateVector[2]) {
		case main_region_preparation_r2_waterHeating:
			exitSequence_main_region_preparation_r2_waterHeating();
			break;
		case main_region_preparation_r2_waiteCup:
			exitSequence_main_region_preparation_r2_waiteCup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Sugar_Water_r1() {
		switch (stateVector[0]) {
		case main_region_Sugar_Water_r1_addSugar:
			exitSequence_main_region_Sugar_Water_r1_addSugar();
			break;
		case main_region_Sugar_Water_r1_addSirup:
			exitSequence_main_region_Sugar_Water_r1_addSirup();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Sugar_Water_r2() {
		switch (stateVector[1]) {
		case main_region_Sugar_Water_r2_addWater:
			exitSequence_main_region_Sugar_Water_r2_addWater();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region_Sugar_Water_r1__choice_0() {
		if (check_main_region_Sugar_Water_r1__choice_0_tr0_tr0()) {
			effect_main_region_Sugar_Water_r1__choice_0_tr0();
		} else {
			effect_main_region_Sugar_Water_r1__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			effect_main_region__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_1() {
		if (check_main_region__choice_1_tr0_tr0()) {
			effect_main_region__choice_1_tr0();
		} else {
			effect_main_region__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_2() {
		if (check_main_region__choice_2_tr1_tr1()) {
			effect_main_region__choice_2_tr1();
		} else {
			effect_main_region__choice_2_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_r1__entry_Default() {
		enterSequence_main_region_Customer_r1_initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_r1_coinChosen_r1__entry_Default() {
		enterSequence_main_region_Customer_r1_coinChosen_r1_waitCoin_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_extraIce__entry_Default() {
		enterSequence_main_region_Customer_extraIce_waitIce_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_extraSirup__entry_Default() {
		enterSequence_main_region_Customer_extraSirup_waitSirup_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_extraMilk__entry_Default() {
		enterSequence_main_region_Customer_extraMilk_waitMilk_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_r2__entry_Default() {
		enterSequence_main_region_Customer_r2_chosenSlide_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_textActive__entry_Default() {
		enterSequence_main_region_Customer_textActive_userText_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_active__entry_Default() {
		enterSequence_main_region_Customer_active_initAll_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Customer_myCup__entry_Default() {
		enterSequence_main_region_Customer_myCup_detect_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Customer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_prepareMachine_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1_coffee_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_coffee_r1_putPod_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1_espresso_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_espresso_r1_grainCrushing_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1_espresso_r1_step2_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1_espresso_r1_step2_r2__entry_Default() {
		enterSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r1_tea_r1__entry_Default() {
		enterSequence_main_region_preparation_r1_tea_r1_putTeaBag_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_preparation_r2__entry_Default() {
		enterSequence_main_region_preparation_r2_waterHeating_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Sugar_Water_r1__entry_Default() {
		react_main_region_Sugar_Water_r1__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Sugar_Water_r2__entry_Default() {
		enterSequence_main_region_Sugar_Water_r2_addWater_default();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_preparation_r1_espresso_r1_step2_r1__exit_Default() {
		effect_main_region_preparation_r1_espresso_r1_step2_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_preparation_r1_espresso_r1_step2_r2__exit_Default() {
		effect_main_region_preparation_r1_espresso_r1_step2_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_Sugar_Water_r1__exit_Default() {
		effect_main_region_Sugar_Water_tr0();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_Sugar_Water_r2__exit_Default() {
		effect_main_region_Sugar_Water_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Customer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancel) {
				exitSequence_main_region_Customer();
				sCInterface.raiseCancelOrder();
				
				enterSequence_main_region_Customer_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_initial_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseCoin) {
				exitSequence_main_region_Customer_r1_initial();
				sCInterface.raiseWaitCoin();
				
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r1_coinChosen_default();
			} else {
				if (sCInterface.chooseDrink) {
					exitSequence_main_region_Customer_r1_initial();
					sCInterface.raiseIsActive();
					
					enterSequence_main_region_Customer_r1_waitPaymentChoice_default();
				} else {
					if (sCInterface.chooseNFC) {
						exitSequence_main_region_Customer_r1_initial();
						sCInterface.raiseIsActive();
						
						enterSequence_main_region_Customer_r1_waitDrinkChoice_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_coinChosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseCoin) {
				exitSequence_main_region_Customer_r1_coinChosen();
				sCInterface.raiseWaitCoin();
				
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r1_coinChosen_default();
			} else {
				if (sCInterface.orderSuccess) {
					exitSequence_main_region_Customer();
					enterSequence_main_region_preparation_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_coinChosen_r1_waitCoin_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseDrink) {
				exitSequence_main_region_Customer_r1_coinChosen_r1_waitCoin();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder_default();
				main_region_Customer_r1_coinChosen_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Customer_r1_coinChosen_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_coinChosen_r1_comfirmOrder_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseDrink) {
				exitSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r1_coinChosen_r1_comfirmOrder_default();
				main_region_Customer_r1_coinChosen_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Customer_r1_coinChosen_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_waitPaymentChoice_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseDrink) {
				exitSequence_main_region_Customer_r1_waitPaymentChoice();
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r1_waitPaymentChoice_default();
			} else {
				if (sCInterface.chooseCoin) {
					exitSequence_main_region_Customer_r1_waitPaymentChoice();
					sCInterface.raiseWaitCoin();
					
					sCInterface.raiseIsActive();
					
					enterSequence_main_region_Customer_r1_coinChosen_default();
				} else {
					if (sCInterface.chooseNFC) {
						exitSequence_main_region_Customer();
						sCInterface.raiseNFCSuccess();
						
						enterSequence_main_region_preparation_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r1_waitDrinkChoice_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseDrink) {
				exitSequence_main_region_Customer();
				sCInterface.raiseNFCSuccess();
				
				enterSequence_main_region_preparation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraIce_waitIce_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseIce) {
				exitSequence_main_region_Customer_extraIce_waitIce();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMyIce(true);
				
				enterSequence_main_region_Customer_extraIce_choseIce_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraIce_choseIce_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseIce) {
				exitSequence_main_region_Customer_extraIce_choseIce();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMyIce(false);
				
				enterSequence_main_region_Customer_extraIce_waitIce_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraSirup_waitSirup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseSirup) {
				exitSequence_main_region_Customer_extraSirup_waitSirup();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMySirup(true);
				
				enterSequence_main_region_Customer_extraSirup_choseSirup_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraSirup_choseSirup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseSirup) {
				exitSequence_main_region_Customer_extraSirup_choseSirup();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMySirup(false);
				
				enterSequence_main_region_Customer_extraSirup_waitSirup_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraMilk_waitMilk_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseMilk) {
				exitSequence_main_region_Customer_extraMilk_waitMilk();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMyMilk(true);
				
				enterSequence_main_region_Customer_extraMilk_choseMilk_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_extraMilk_choseMilk_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseMilk) {
				exitSequence_main_region_Customer_extraMilk_choseMilk();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMyMilk(false);
				
				enterSequence_main_region_Customer_extraMilk_waitMilk_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_r2_chosenSlide_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chooseSlide) {
				exitSequence_main_region_Customer_r2_chosenSlide();
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_r2_chosenSlide_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_textActive_userText_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.changeText) {
				exitSequence_main_region_Customer_textActive_userText();
				sCInterface.raiseIsActive();
				
				enterSequence_main_region_Customer_textActive_userText_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_active_initAll_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isActive) {
				exitSequence_main_region_Customer_active_initAll();
				enterSequence_main_region_Customer_active_active_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_active_active_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isActive) {
				exitSequence_main_region_Customer_active_active();
				enterSequence_main_region_Customer_active_active_default();
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Customer_active_active();
					sCInterface.raiseInitial();
					
					enterSequence_main_region_Customer_active_initAll_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_myCup_detect_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCup) {
				exitSequence_main_region_Customer_myCup_detect();
				sCInterface.raiseConfirmCoins();
				
				sCInterface.raiseIsActive();
				
				sCInterface.setMyCup(true);
				
				enterSequence_main_region_Customer_myCup_hasCup_default();
				main_region_Customer_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Customer_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Customer_myCup_hasCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_Customer_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.isCoffee) {
				exitSequence_main_region_preparation_r1_init();
				enterSequence_main_region_preparation_r1_coffee_default();
			} else {
				if (sCInterface.isEspresso) {
					exitSequence_main_region_preparation_r1_init();
					enterSequence_main_region_preparation_r1_espresso_default();
				} else {
					if (sCInterface.isTea) {
						exitSequence_main_region_preparation_r1_init();
						sCInterface.setTea(true);
						
						enterSequence_main_region_preparation_r1_tea_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_coffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_coffee_r1_putPod_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_preparation_r1_coffee_r1_putPod();
				sCInterface.raiseBar();
				
				enterSequence_main_region_preparation_r1_coffee_r1_putCup_default();
				main_region_preparation_r1_coffee_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_coffee_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_coffee_r1_putCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_preparation_r1_coffee();
				sCInterface.raiseBar();
				
				enterSequence_main_region_preparation_r1_waiteWater_default();
			} else {
				if (sCInterface.getMyCup()==true) {
					exitSequence_main_region_preparation_r1_coffee();
					sCInterface.raiseBar();
					
					enterSequence_main_region_preparation_r1_waiteWater_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_coffee_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_espresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_espresso_r1_grainCrushing_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_preparation_r1_espresso_r1_grainCrushing();
				sCInterface.raiseBar();
				
				enterSequence_main_region_preparation_r1_espresso_r1_step2_default();
				main_region_preparation_r1_espresso_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_espresso_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_espresso_r1_step2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_espresso_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_espresso_r1_step2_r1_putCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
				sCInterface.raiseBar();
				
				react_main_region_preparation_r1_espresso_r1_step2_r1__exit_Default();
			} else {
				if (sCInterface.getMyCup()==true) {
					exitSequence_main_region_preparation_r1_espresso_r1_step2_r1_putCup();
					sCInterface.raiseBar();
					
					react_main_region_preparation_r1_espresso_r1_step2_r1__exit_Default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_espresso_r1_step2_r2_packBeans_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_region_preparation_r1_espresso_r1_step2_r2_packBeans();
				sCInterface.raiseBar();
				
				react_main_region_preparation_r1_espresso_r1_step2_r2__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_espresso_r1_step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_tea_r1_putTeaBag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_main_region_preparation_r1_tea_r1_putTeaBag();
				sCInterface.raiseBar();
				
				enterSequence_main_region_preparation_r1_tea_r1_putCup_default();
				main_region_preparation_r1_tea_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_tea_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_tea_r1_putCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_main_region_preparation_r1_tea();
				sCInterface.raiseBar();
				
				enterSequence_main_region_preparation_r1_waiteWater_default();
			} else {
				if (sCInterface.getMyCup()==true) {
					exitSequence_main_region_preparation_r1_tea();
					sCInterface.raiseBar();
					
					enterSequence_main_region_preparation_r1_waiteWater_default();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_r1_tea_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_prepareMachine_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_region_preparation_r1_prepareMachine();
				sCInterface.raisePrepStart();
				
				enterSequence_main_region_preparation_r1_init_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r1_waiteWater_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_main_region_preparation_r1_waiteWater();
				sCInterface.raiseCupReady();
				
				enterSequence_main_region_preparation_r1_waiteWater_default();
			} else {
				if (sCInterface.waterReady) {
					exitSequence_main_region_preparation();
					enterSequence_main_region_Sugar_Water_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r2_waterHeating_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.heatWater) {
				exitSequence_main_region_preparation_r2_waterHeating();
				enterSequence_main_region_preparation_r2_waiteCup_default();
				main_region_preparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_preparation_r2_waiteCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[10]) {
				exitSequence_main_region_preparation_r2_waiteCup();
				sCInterface.raiseWaterReady();
				
				enterSequence_main_region_preparation_r2_waiteCup_default();
				main_region_preparation_react(false);
			} else {
				if (sCInterface.cupReady) {
					exitSequence_main_region_preparation();
					enterSequence_main_region_Sugar_Water_default();
					react();
				} else {
					if (sCInterface.getMyCup()==true) {
						exitSequence_main_region_preparation();
						enterSequence_main_region_Sugar_Water_default();
						react();
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_preparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_infusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[11]) {
				exitSequence_main_region_infusion();
				sCInterface.raiseBar();
				
				enterSequence_main_region_removeTeaBag_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_removeTeaBag_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[12]) {
				exitSequence_main_region_removeTeaBag();
				sCInterface.raiseBar();
				
				react_main_region__choice_2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Sugar_Water_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Sugar_Water_r1_addSugar_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[13]) {
				exitSequence_main_region_Sugar_Water_r1_addSugar();
				sCInterface.raiseBar();
				
				react_main_region_Sugar_Water_r1__exit_Default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Sugar_Water_r1_addSirup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[14]) {
				exitSequence_main_region_Sugar_Water_r1_addSirup();
				sCInterface.raiseBar();
				
				react_main_region_Sugar_Water_r1__exit_Default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Sugar_Water_r2_addWater_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[15]) {
				exitSequence_main_region_Sugar_Water_r2_addWater();
				sCInterface.raiseBar();
				
				react_main_region_Sugar_Water_r2__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Sugar_Water_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_prepFinish_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.takeDrink) {
				exitSequence_main_region_prepFinish();
				sCInterface.raiseCleanMachine();
				
				sCInterface.raiseCheckIngredients();
				
				enterSequence_main_region_Customer_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_addMilk_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[16]) {
				exitSequence_main_region_addMilk();
				sCInterface.raisePrepFinish();
				
				enterSequence_main_region_prepFinish_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_addIce_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[17]) {
				exitSequence_main_region_addIce();
				sCInterface.raiseBar();
				
				react_main_region__choice_2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
